<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>home on Konstantinos Karampogias</title>
    <link>http://www.karampok.me/</link>
    <description>Recent content in home on Konstantinos Karampogias</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 26 Sep 2024 09:04:06 +0200</lastBuildDate>
    <atom:link href="http://www.karampok.me/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About</title>
      <link>http://www.karampok.me/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://www.karampok.me/about/</guid>
      <description>&lt;p&gt;Principal Software Engineer at Redhat, my focus area is networking, Linux, Kubernetes.&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    <item>
      <title>Kind k8s cluster w/ containerlab w/o docker network</title>
      <link>http://www.karampok.me/posts/kind-containerlab/</link>
      <pubDate>Thu, 26 Sep 2024 09:04:06 +0200</pubDate>
      <guid>http://www.karampok.me/posts/kind-containerlab/</guid>
      <description>&lt;h1 id=&#34;why&#34;&gt;Why&lt;/h1&gt;&#xA;&lt;p&gt;Using kind to spin up fast k8s clusters is great, but when it comes down&#xA;to networking part e.g. multiple interfaces on the nodes or connect nodes to&#xA;a complex network fabric, kind is limited. Containerlab on the other side makes&#xA;the build of network fabric easy. Containerlab and kind do work&#xA;&lt;a href=&#34;https://containerlab.dev/manual/kinds/k8s-kind/&#34;&gt;together&lt;/a&gt; but AFAICT it works using a secondary&#xA;interface on the node, while the primary (=default routing) should remain to provide&#xA;API access and internet connectivity.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chaining CNI Plugins</title>
      <link>http://www.karampok.me/posts/chained-plugins-cni/</link>
      <pubDate>Sun, 11 Feb 2018 21:06:48 +0100</pubDate>
      <guid>http://www.karampok.me/posts/chained-plugins-cni/</guid>
      <description>&lt;p&gt;CNI (Container Network Interface) supports since version 0.3.0 chained plugins.&#xA;This is a feature which can potential solve various cases. In the same time&#xA;it keeps the container network stack clean. This post explains how chained&#xA;plugins can be used in low level and how someone can extend the chain by adding&#xA;a custom made CNI plugin. Whether your container orchestrator supports plugin&#xA;chaining depends on which Container Runtime or which version is being used.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How a Container Runtime is using CNI</title>
      <link>http://www.karampok.me/posts/container-networking-with-cni/</link>
      <pubDate>Sat, 20 Jan 2018 12:00:00 +0600</pubDate>
      <guid>http://www.karampok.me/posts/container-networking-with-cni/</guid>
      <description>&lt;p&gt;The last couple of years I have been working with containers in low level. I&#xA;learned how they work under the hood and I got familiar with container&#xA;standards like OCI (Open Container Initiative) and CNI (Container Network&#xA;Interface). When it comes to the runtime spec, there are quite many resources&#xA;which explain in detail the runtime standard. On the other hand, there are not&#xA;many resources about CNI, and it has not been clear to me how the runtime&#xA;engine is using the CNI standard, as well as how difficult is to&#xA;write a network CNI compatible plugin.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
