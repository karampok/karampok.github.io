<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Konstantinos Karampogias</title>
    <link>http://www.karampok.me/tags/linux/</link>
    <description>Recent content in Linux on Konstantinos Karampogias</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 20 Jan 2018 12:00:00 +0600</lastBuildDate>
    
	<atom:link href="http://www.karampok.me/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How a Container Runtime is using CNI</title>
      <link>http://www.karampok.me/posts/container-networking-with-cni/</link>
      <pubDate>Sat, 20 Jan 2018 12:00:00 +0600</pubDate>
      
      <guid>http://www.karampok.me/posts/container-networking-with-cni/</guid>
      <description>The last couple of years I have been working with containers in low level. I learned how they work under the hood and I got familiar with container standards like OCI (Open Container Initiative) and CNI (Container Network Interface). When it comes to the runtime spec, there are quite many resources which explain in detail the runtime standard. On the other hand, there are not many resources about CNI, and it has not been clear to me how the runtime engine is using the CNI standard, as well as how difficult is to write a network CNI compatible plugin.</description>
    </item>
    
  </channel>
</rss>